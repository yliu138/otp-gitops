apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops-cntk
spec:
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
    service:
      type: ''
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  resourceCustomizations: |
    platform.stackrox.io/Central:
      health.lua: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.status == "True" and (condition.reason == "InstallSuccessful" or condition.reason =="UpgradeSuccessful") then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    cdi.kubevirt.io/DataVolume:
      health.lua: |
        hs = { status="Progressing", message="No status available"}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if hs.message == "Succeeded" then
              hs.status = "Healthy"
              return hs
            elseif hs.message == "Failed" or hs.message == "Unknown" then
              hs.status = "Degraded"
            elseif hs.message == "Paused" then
              hs.status = "Suspended"
              return hs
            end
          end
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Running" and condition.status == "False" and condition.reason == "Error" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        return hs
    hco.kubevirt.io/HyperConverged:
      health.lua: |
        hs = { status="Progressing", message="No status available"}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Available" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = "Status is Available"
              elseif condition.type == "Degraded" and condition.status == "True" then
                hs.status = "Degraded"
                hs.message = condition.reason
              elseif condition.type == "Progressing" and condition.status == "True" then
                hs.message = condition.reason
              end
            end
          end
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
          end
        end
        return hs
    kubevirt.io/VirtualMachineInstance:
      health.lua: |
        hs = { status="Progressing", message="No status available"}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if hs.message == "Failed" then
              hs.status = "Degraded"
              return hs
            elseif hs.message == "Pending" or hs.message == "Scheduling" or hs.message == "Scheduled" then
              return hs
            elseif hs.message == "Succeeded" then
              hs.status = "Suspended"
              return hs
            elseif hs.message == "Unknown" then
              hs.status = "Unknown"
              return hs
            end
          end
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" then
                if condition.status == "True" then
                  hs.status = "Healthy"
                  hs.message = "Running"
                else
                  hs.status = "Degraded"
                  hs.message = condition.message
                end
              elseif condition.type == "Paused" and condition.status == "True" then
                hs.status = "Suspended"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        return hs
    kubevirt.io/VirtualMachine:
      health.lua: |
        hs = { status="Progressing", message="No status available"}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Paused" and condition.status == "True" then
                hs.status = "Suspended"
                hs.message = "Paused"
                return hs
              end
              if condition.type == "Ready" then
                if condition.status == "True" then
                  hs.status="Healthy"
                  hs.message="Running"
                else
                  if obj.status.created then
              hs.message = "Starting"
                  else
                    hs.status = "Suspended"
                    hs.message = "Stopped"
                  end
                end
              end
            end
          end
          if obj.status.printableStatus ~= nil then
            hs.message = obj.status.printableStatus
          end
        end
        return hs
    bitnami.com/SealedSecret:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Synced" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Synced" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for sync status"
        return hs
    build.openshift.io/BuildConfig:
      ignoreDifferences: |
        jsonPointers:
        - /status/lastVersion
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
    ServiceAccount:
      ignoreDifferences: |
        jsonPointers:
        - /imagePullSecrets
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs
    Job:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.active ~= nil then
            if obj.status.active == "1" then
              hs.status = "Progressing"
              hs.message = obj.status.active .. " active job(s)."
              return hs
            end
          end
          if obj.status.succeeded ~= nil then
            if obj.status.succeeded == 1 then
              hs.status = "Healthy"
              hs.message = "Job completed successfully."
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Job to complete."
        return hs
    argoproj.io/Application:
      ignoreDifferences: |
        jsonPointers:
        - /spec/source/targetRevision
        - /spec/source/repoURL
    argoproj.io/AppProject:
      ignoreDifferences: |
        jsonPointers:
        - /spec/sourceRepos
    operators.coreos.com/OperatorGroup:
      ignoreDifferences: |
        jsonPointers:
        - /metadata/annotations/olm.providedAPIs
    operators.coreos.com/InstallPlan:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs
    operators.coreos.com/Subscription:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.installedCSV ~= nil then
            hs.status = "Healthy"
            hs.message = "CSV Installed"
            if obj.status.state ~= nil then
              hs.message = obj.status.state
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        if obj.status.state ~= nil then
          hs.message = obj.status.state
        end
        return hs
    operator.ibm.com/CommonService:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Succeeded" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs
    mq.ibm.com/QueueManager:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            hs.message = obj.status.phase
            if obj.status.phase == "Running" then
              hs.status = "Healthy"
            else
              hs.status = "Progressing"
            end
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Unknown"
        return hs                  
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac: {}
  # rbac:
  #   defaultPolicy: 'role:readonly'
  #   policy: |
  #      g, system:cluster-admins, role:admin
  #   scopes: '[groups]'
  repo:
    image: quay.io/benswinneyau/openshift-gitops-repo-server
    version: latest
    resources:
      limits:
        cpu: '1'
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  dex:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    # openShiftOAuth: true
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  kustomizeBuildOptions: '--enable-alpha-plugins'
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 4Gi
      requests:
        cpu: 250m
        memory: 1Gi
